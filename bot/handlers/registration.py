import logging
from aiogram import Router, types
from aiogram.filters import Command
from config import BASE_URL
from utils.token_manager import TokenManager

router = Router()

token_manager = TokenManager()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TokenManager

@router.message(Command("start"))
async def start(message: types.Message):
    command_with_args = message.text.split()

    if len(command_with_args) < 2:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤.")
        return

    user_uuid = command_with_args[1]  # –ü–æ–ª—É—á–∞–µ–º UUID –Ω–∞–ø—Ä—è–º—É—é

    if not user_uuid:
        await message.answer("–£–ø—Å! üòÖ –ö–∞–∂–µ—Ç—Å—è, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–±—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        return

    telegram_id = message.from_user.id

    try:
        response = await token_manager.request_with_token(
            method="POST",
            url=f"{BASE_URL}link_telegram",
            params={"user_id": user_uuid, "telegram_id": telegram_id},  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            headers={"accept": "application/json"}
        )

        if response.status_code == 200:
            await message.answer(
                "üéâ –£—Ä–∞! –¢–≤–æ–π Telegram ID —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –¢–µ–ø–µ—Ä—å –º—ã —Å–º–æ–∂–µ–º –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π! üöÄ")
        else:
            await message.answer("–û–π! üòï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
